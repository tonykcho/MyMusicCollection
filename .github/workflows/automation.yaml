name: automation
on:
  pull_request:
    branches:
      - main

jobs:
  build-api:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pwd
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "9.0.x"
      - name: Install dependencies
        run: dotnet restore MusicApi/MusicApi.csproj
      - name: Build
        run: dotnet build --no-restore MusicApi/MusicApi.csproj --configuration Release --verbosity minimal
      - name: Run EF Core Migrations
        run: |
          cd MusicApi
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet ef database update --project MusicApi.csproj --context AppDbContext --connection "Host=localhost;Port=5432;Database=postgres;Username=postgres;Password=pwd"
      # - name: Test
      #   run: dotnet test --no-build --verbosity normal MusicApi.Tests/MusicApi.Tests.csproj

  build-ui:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
        working-directory: music-ui
      - name: Build
        run: npm run build
        working-directory: music-ui
      # - name: Run tests
      #   run: npm test -- --watchAll=false --coverage
      #   working-directory: music-ui

  publish-music-api-ghcr:
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u tonykcho --password-stdin
      - name: Build and push multi-platform image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ghcr.io/tonykcho/music-api:latest \
            -f MusicApi/Dockerfile \
            --push ./MusicApi

  publish-music-ui-ghcr:
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u tonykcho --password-stdin
      - name: Build and push multi-platform image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }} \
            -t ghcr.io/tonykcho/music-ui:latest \
            -f music-ui/Dockerfile \
            --push ./music-ui

  publish-music-api-migrate-ghcr:
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u tonykcho --password-stdin
      - name: Build and push multi-platform image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ghcr.io/tonykcho/music-api-migrate:latest \
            -f MusicApi/Dockerfile.migrate \
            --push ./MusicApi
